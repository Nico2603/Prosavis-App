rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // === USUARIOS ===
    // CRUD completo para su propio perfil
    match /users/{userId} {
      allow read: if request.auth != null && request.auth.uid == userId;
      allow write: if request.auth != null && 
                  request.auth.uid == userId &&
                  // üñºÔ∏è Validar URL de imagen de perfil (si se actualiza)
                  (!request.resource.data.keys().hasAny(['profileImageUrl']) || 
                   request.resource.data.profileImageUrl == null || 
                   request.resource.data.profileImageUrl.matches('https://firebasestorage.googleapis.com/.*'));
      
      // === SUBCOLECCI√ìN: DIRECCIONES GUARDADAS ===
      // Cada usuario puede gestionar sus propias direcciones
      match /addresses/{addressId} {
        allow read, write: if request.auth != null && request.auth.uid == userId;
      }
    }
    
    // === SERVICIOS ===
    // ‚úÖ NAVEGACI√ìN P√öBLICA: Cualquiera puede explorar servicios
    // üîí GESTI√ìN PRIVADA: Solo el propietario puede crear/modificar sus servicios
    match /services/{serviceId} {
      allow read: if true; // üìñ Lectura p√∫blica para navegaci√≥n
      
      // ‚úÖ CREAR SERVICIO: Validaciones robustas para nuevos servicios
      allow create: if request.auth != null && 
                   request.auth.uid == request.resource.data.providerId && // üîê Solo usuarios autenticados
                   // üìã Validar campos obligatorios
                   request.resource.data.keys().hasAll(['title', 'description', 'category', 'price', 'providerId']) &&
                   request.resource.data.title is string && request.resource.data.title.size() > 5 &&
                   request.resource.data.description is string && request.resource.data.description.size() > 10 &&
                   request.resource.data.category is string && request.resource.data.category.size() > 0 &&
                   request.resource.data.price is number && request.resource.data.price >= 0 &&
                   // üñºÔ∏è Validar que las URLs de im√°genes sean de Firebase Storage (si existen)
                   // Permitir crear servicios inicialmente sin im√°genes para nuestro nuevo flujo
                   (!request.resource.data.keys().hasAny(['mainImage']) || 
                    request.resource.data.mainImage == null || 
                    request.resource.data.mainImage.matches('https://firebasestorage.googleapis.com/.*')) &&
                   (!request.resource.data.keys().hasAny(['images']) || 
                    request.resource.data.images == null ||
                    (request.resource.data.images is list && 
                     request.resource.data.images.size() <= 4));
      
      // ‚úÖ ACTUALIZAR SERVICIO: Solo el propietario
      //    Los agregados de rese√±as los actualiza Cloud Functions
      allow update: if request.auth != null &&
                    request.auth.uid == resource.data.providerId &&
                    // üñºÔ∏è Validar URLs de im√°genes en actualizaciones (si se modifican)
                    (!request.resource.data.keys().hasAny(['mainImage']) || 
                     request.resource.data.mainImage == null || 
                     request.resource.data.mainImage.matches('https://firebasestorage.googleapis.com/.*')) &&
                    (!request.resource.data.keys().hasAny(['images']) || 
                     request.resource.data.images == null ||
                     (request.resource.data.images is list && 
                      request.resource.data.images.size() <= 4));

      // ‚úÖ ELIMINAR SERVICIO: Solo el propietario (sin validaciones de contenido)
      allow delete: if request.auth != null && 
                   request.auth.uid == resource.data.providerId;
      
      // === RESE√ëAS DE SERVICIOS (SUBCOLLECCI√ìN) ===
      // ‚úÖ NAVEGACI√ìN P√öBLICA: Cualquiera puede leer rese√±as de servicios
      // üîí GESTI√ìN PERSONAL: Solo el autor puede modificar sus rese√±as
      match /reviews/{reviewId} {
        allow read: if true; // üìñ Lectura p√∫blica para ver rese√±as
        allow create: if request.auth != null && 
                     request.auth.uid == request.resource.data.userId && // üîê Solo usuarios autenticados
                     // üìã Validar campos obligatorios (comentario ya no es obligatorio)
                     request.resource.data.keys().hasAll(['serviceId', 'userId', 'rating']) &&
                     request.resource.data.rating is number && 
                     request.resource.data.rating >= 1 && 
                     request.resource.data.rating <= 5 &&
                     // üìã Si viene comentario, validar que sea string (sin l√≠mites de longitud)
                     (!request.resource.data.keys().hasAny(['comment']) || request.resource.data.comment is string) &&
                     // üìã Validar que el serviceId coincida con el documento padre
                     request.resource.data.serviceId == serviceId &&
                     // üö´ No permitir auto-rese√±as (no rese√±ar tus propios servicios)
                     request.auth.uid != get(/databases/$(database)/documents/services/$(serviceId)).data.providerId &&
                     // üö´ No permitir m√∫ltiples rese√±as del mismo usuario para el mismo servicio
                     !exists(/databases/$(database)/documents/services/$(serviceId)/reviews/$(request.auth.uid));
        allow update, delete: if request.auth != null && 
                             request.auth.uid == resource.data.userId; // üîê Solo el autor de la rese√±a
      }
      
      // === IM√ÅGENES DE SERVICIOS ===
      // Metadatos de im√°genes (las im√°genes reales van en Storage)
      match /images/{imageId} {
        allow read: if true; // üìñ Cualquiera puede ver metadatos de im√°genes
        allow write: if request.auth != null && 
                    request.auth.uid == get(/databases/$(database)/documents/services/$(serviceId)).data.providerId; // üîê Solo el propietario del servicio
      }
    }
    
    // === FAVORITOS ===
    // ‚úÖ GESTI√ìN PERSONAL: Cada usuario gestiona sus propios favoritos
    match /favorites/{favoriteId} {
      allow read, write: if request.auth != null && 
                        request.auth.uid == resource.data.userId; // üîê Solo el propietario de los favoritos
      allow create: if request.auth != null && 
                   request.auth.uid == request.resource.data.userId && // üîê Solo usuarios autenticados
                   // üìã Validar que el servicio existe
                   exists(/databases/$(database)/documents/services/$(request.resource.data.serviceId));
    }
    
    // === RESE√ëAS GLOBALES ===
    // ‚úÖ NAVEGACI√ìN P√öBLICA: Cualquiera puede leer rese√±as
    // üîí GESTI√ìN PERSONAL: Solo el autor puede modificar sus rese√±as
    match /reviews/{reviewId} {
      allow read: if true; // üìñ Lectura p√∫blica para ver rese√±as
      allow create: if request.auth != null && 
                   request.auth.uid == request.resource.data.userId && // üîê Solo usuarios autenticados
                   // üìã Validar campos obligatorios (comentario opcional)
                   request.resource.data.keys().hasAll(['serviceId', 'userId', 'rating']) &&
                   request.resource.data.rating is number && 
                   request.resource.data.rating >= 1 && 
                   request.resource.data.rating <= 5 &&
                   // üìã Si viene comentario, validar que sea string (sin l√≠mites)
                   (!request.resource.data.keys().hasAny(['comment']) || request.resource.data.comment is string) &&
                   // üìã Validar que el servicio existe
                   exists(/databases/$(database)/documents/services/$(request.resource.data.serviceId)) &&
                   // üö´ No permitir auto-rese√±as (no rese√±ar tus propios servicios)
                   request.auth.uid != get(/databases/$(database)/documents/services/$(request.resource.data.serviceId)).data.providerId;
      allow update, delete: if request.auth != null && 
                           request.auth.uid == resource.data.userId; // üîê Solo el autor de la rese√±a
    }
    
    // === CATEGOR√çAS DE SERVICIOS ===
    // ‚úÖ NAVEGACI√ìN P√öBLICA: Cualquiera puede ver categor√≠as
    // üîí GESTI√ìN ADMIN: Solo administradores pueden modificar
    match /categories/{categoryId} {
      allow read: if true; // üìñ Lectura p√∫blica para navegaci√≥n
      allow write: if false; // üîê Solo administradores (desde backend/consola)
    }
    
    // === NOTIFICACIONES ===
    // Sistema de notificaciones para usuarios
    match /notifications/{notificationId} {
      allow read: if request.auth != null && 
                 request.auth.uid == resource.data.userId; // üîê Solo el destinatario
      allow write: if false; // üîê Solo el sistema puede crear notificaciones
    }
    
    // === CONFIGURACI√ìN GLOBAL ===
    // Configuraci√≥n p√∫blica de la aplicaci√≥n
    match /app_config/{configId} {
      allow read: if true; // üìñ Configuraci√≥n p√∫blica (t√©rminos, contacto, etc.)
      allow write: if false; // üîê Solo administradores desde backend
    }
    
    // === UBICACIONES ===
    // Cache de ubicaciones para mejorar rendimiento
    match /locations/{locationId} {
      allow read: if true; // üìñ Lectura p√∫blica para b√∫squedas geogr√°ficas
      allow write: if false; // üîê Solo el sistema puede gestionar ubicaciones
    }
    
    // === REPORTES ===
    // Sistema de reportes para servicios/usuarios problem√°ticos
    match /reports/{reportId} {
      allow create: if request.auth != null && 
                   request.auth.uid == request.resource.data.reporterId; // üîê Solo usuarios autenticados pueden reportar
      allow read, update, delete: if false; // üîê Solo administradores desde backend
    }
    
    // üö´ Denegar acceso a todo lo dem√°s por defecto
    match /{document=**} {
      allow read, write: if false;
    }
  }
}